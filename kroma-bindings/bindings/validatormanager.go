// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IValidatorManagerConstructorParams is an auto generated low-level Go binding around an user-defined struct.
type IValidatorManagerConstructorParams struct {
	L2Oracle                       common.Address
	AssetManager                   common.Address
	TrustedValidator               common.Address
	CommissionRateMinChangeSeconds *big.Int
	RoundDurationSeconds           *big.Int
	JailPeriodSeconds              *big.Int
	JailThreshold                  *big.Int
	MaxOutputFinalizations         *big.Int
	BaseReward                     *big.Int
	MinRegisterAmount              *big.Int
	MinStartAmount                 *big.Int
}

// ValidatorManagerMetaData contains all meta data concerning the ValidatorManager contract.
var ValidatorManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_constructorParams\",\"type\":\"tuple\",\"internalType\":\"structIValidatorManager.ConstructorParams\",\"components\":[{\"name\":\"_l2Oracle\",\"type\":\"address\",\"internalType\":\"contractL2OutputOracle\"},{\"name\":\"_assetManager\",\"type\":\"address\",\"internalType\":\"contractAssetManager\"},{\"name\":\"_trustedValidator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_commissionRateMinChangeSeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_roundDurationSeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_jailPeriodSeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_jailThreshold\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_maxOutputFinalizations\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_baseReward\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_minRegisterAmount\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_minStartAmount\",\"type\":\"uint128\",\"internalType\":\"uint128\"}]}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ASSET_MANAGER\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractAssetManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BASE_REWARD\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BOOSTED_REWARD_DENOM\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BOOSTED_REWARD_NUMERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"COMMISSION_RATE_DENOM\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"COMMISSION_RATE_MIN_CHANGE_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"JAIL_PERIOD_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"JAIL_THRESHOLD\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"L2_ORACLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractL2OutputOracle\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_OUTPUT_FINALIZATIONS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MIN_REGISTER_AMOUNT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MIN_START_AMOUNT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROUND_DURATION_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"TRUSTED_VALIDATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"afterSubmitL2Output\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"changeCommissionRate\",\"inputs\":[{\"name\":\"newCommissionRate\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"checkSubmissionEligibility\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCommissionMaxChangeRate\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCommissionRate\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStatus\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumIValidatorManager.ValidatorStatus\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getWeight\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint120\",\"internalType\":\"uint120\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"jailExpiresAt\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nextValidator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"noSubmissionCount\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerValidator\",\"inputs\":[{\"name\":\"assets\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"commissionRate\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"commissionMaxChangeRate\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slash\",\"inputs\":[{\"name\":\"loser\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"winner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"startValidator\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"startedValidatorCount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"startedValidatorTotalWeight\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint120\",\"internalType\":\"uint120\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"tryUnjail\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateValidatorTree\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tryRemove\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"ChallengeRewardDistributed\",\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardDistributed\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"validatorReward\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"},{\"name\":\"baseReward\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"},{\"name\":\"boostedReward\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Slashed\",\"inputs\":[{\"name\":\"loser\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"winner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorCommissionRateChanged\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"oldCommissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"newCommissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorJailed\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"expiresAt\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorRegistered\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"started\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"},{\"name\":\"commissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"commissionMaxChangeRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"assets\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorStarted\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"startsAt\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorUnjailed\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"CommissionChangeRateExceeded\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ImproperValidatorStatus\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InsufficientAsset\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidConstructorParams\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MaxCommissionChangeRateExceeded\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MaxCommissionRateExceeded\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotAllowedCaller\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotElapsedCommissionChangePeriod\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotElapsedJailPeriod\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotSelectedPriorityValidator\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SameCommissionRate\",\"inputs\":[]}]",
	Bin: "0x6101e06040523480156200001257600080fd5b5060405162004d0d38038062004d0d833981016040819052620000359162000171565b8061014001516001600160801b03168161012001516001600160801b031611156200007357604051631510b77f60e01b815260040160405180910390fd5b80516001600160a01b0390811660809081526020830151821660a0908152604084015190921660c0908152610120808501516001600160801b0390811660e09081526101408088015183166101009081526060890151841690945294870151821690945293850151841661016052908401518316610180529083015182166101a05290910151166101c05262000264565b60405161016081016001600160401b03811182821017156200013657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200015457600080fd5b919050565b80516001600160801b03811681146200015457600080fd5b600061016082840312156200018557600080fd5b6200018f62000104565b6200019a836200013c565b8152620001aa602084016200013c565b6020820152620001bd604084016200013c565b6040820152620001d06060840162000159565b6060820152620001e36080840162000159565b6080820152620001f660a0840162000159565b60a08201526200020960c0840162000159565b60c08201526200021c60e0840162000159565b60e08201526101006200023181850162000159565b908201526101206200024584820162000159565b908201526101406200025984820162000159565b908201529392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c05161491f620003ee6000396000818161030b01528181613de401528181613e4a0152614115015260008181610666015261268e0152600081816103a80152612be80152600081816104f50152612c3f0152600081816103cf0152610bd00152600081816105c90152610ec801526000818161035a0152818161098d015261151001526000818161027801528181610878015261127b0152600081816103810152610c2d01526000818161045201528181610734015281816108ac015281816109c101528181610a6601528181610cc801528181611457015281816115780152818161186a015281816128ab015281816129e901526140900152600081816101f901528181610b370152818161110e01528181611619015281816116ab0152818161175701528181612458015281816124e90152818161256d01528181612713015281816127ba01528181612b2601528181612da40152612e61015261491f6000f3fe608060405234801561001057600080fd5b50600436106101ef5760003560e01c80637d2243b41161010f578063b9551f82116100a2578063e0cc26a211610071578063e0cc26a21461061c578063e74f82391461064e578063e7816b7f14610661578063eb2ad8cb1461068857600080fd5b8063b9551f821461056c578063be119347146105b1578063dea15254146105c4578063dff221b5146105eb57600080fd5b8063970531c1116100de578063970531c1146104b5578063abeba449146104f0578063ac6c525114610517578063b91b27231461026b57600080fd5b80637d2243b41461047457806388576dc91461047c578063891aab741461048f5780638ee4b602146104a257600080fd5b80633a549046116101875780634cca5e6c116101565780634cca5e6c146103ca57806354fd4d50146103f15780635bab847f1461043a5780636874e0421461044d57600080fd5b80633a5490461461034d5780633bcebcd8146103555780633ee4d4a31461037c57806342223ae9146103a357600080fd5b80631796e52e116101c35780631796e52e146102735780631edbc5801461029a57806322009af61461030657806330ccebb51461032d57600080fd5b80621c2ff6146101f4578063072df4cb146102385780630763fa7e14610242578063110d60691461026b575b600080fd5b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6102406106a5565b005b61024a602881565b6040516fffffffffffffffffffffffffffffffff909116815260200161022f565b61024a606481565b61024a7f000000000000000000000000000000000000000000000000000000000000000081565b6001805468010000000000000000900463ffffffff166000908152600260205260409020015470010000000000000000000000000000000090046effffffffffffffffffffffffffffff165b6040516effffffffffffffffffffffffffffff909116815260200161022f565b61024a7f000000000000000000000000000000000000000000000000000000000000000081565b61034061033b366004614443565b6107e0565b60405161022f919061448f565b61021b610b21565b61024a7f000000000000000000000000000000000000000000000000000000000000000081565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b61024a7f000000000000000000000000000000000000000000000000000000000000000081565b61024a7f000000000000000000000000000000000000000000000000000000000000000081565b61042d6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b60405161022f91906144d0565b610240610448366004614551565b610c4f565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b610240610d40565b61024061048a3660046145a0565b610e5b565b61024061049d366004614443565b611103565b6102406104b03660046145d9565b611226565b61024a6104c3366004614443565b6001600160a01b03166000908152600560205260409020546fffffffffffffffffffffffffffffffff1690565b61024a7f000000000000000000000000000000000000000000000000000000000000000081565b6102e6610525366004614443565b6001600160a01b031660009081526003602090815260408083205463ffffffff168352600290915290206001015461010090046effffffffffffffffffffffffffffff1690565b61059f61057a366004614443565b6001600160a01b03166000908152600460205260409020546301000000900460ff1690565b60405160ff909116815260200161022f565b6102406105bf36600461461e565b61160e565b61024a7f000000000000000000000000000000000000000000000000000000000000000081565b61059f6105f9366004614443565b6001600160a01b0316600090815260046020526040902054610100900460ff1690565b61059f61062a366004614443565b6001600160a01b031660009081526004602052604090205462010000900460ff1690565b61024061065c366004614637565b611755565b61024a7f000000000000000000000000000000000000000000000000000000000000000081565b610690611989565b60405163ffffffff909116815260200161022f565b60046106b0336107e0565b60068111156106c1576106c1614460565b146106f8576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f8abf0af000000000000000000000000000000000000000000000000000000000815233600482018190526107a9916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638abf0af0906024015b602060405180830381865afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190614678565b600191906119ae565b60405142815233907fe8e4e936783175825bcf08ad234ab704ad447aeda363141c88312a07a729d0679060200160405180910390a2565b6001600160a01b03811660009081526004602052604081205460ff1661080857506000919050565b6001600160a01b0382166000908152600560205260409020546fffffffffffffffffffffffffffffffff161561084057506002919050565b6040517f981cee530000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16917f00000000000000000000000000000000000000000000000000000000000000009091169063981cee5390602401602060405180830381865afa1580156108f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109199190614678565b6fffffffffffffffffffffffffffffffff16101561093957506001919050565b6001600160a01b03828116600081815260036020526040908190205490517f12188543000000000000000000000000000000000000000000000000000000008152600481019290925263ffffffff161515917f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16917f000000000000000000000000000000000000000000000000000000000000000090911690631218854390602401602060405180830381865afa158015610a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2e9190614678565b6040517f8abf0af00000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301527f00000000000000000000000000000000000000000000000000000000000000001690638abf0af090602401602060405180830381865afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190614678565b610adb91906146c4565b6fffffffffffffffffffffffffffffffff161015610b0a5780610b015750600392915050565b50600592915050565b80610b185750600492915050565b50600692915050565b600080546001600160a01b031615610c2a5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380446bd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb791906146f5565b9050804210610c19576000610bcc824261470e565b90507f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16811115610c17576001600160a01b039250505090565b505b50506000546001600160a01b031690565b507f000000000000000000000000000000000000000000000000000000000000000090565b808015610c7557506005610c62836107e0565b6006811115610c7357610c73614460565b145b15610c8a57610c85600183611f33565b505050565b6040517f8abf0af00000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152610c859184917f00000000000000000000000000000000000000000000000000000000000000001690638abf0af090602401602060405180830381865afa158015610d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d339190614678565b600191906120d6565b5050565b6002610d4b336107e0565b6006811115610d5c57610d5c614460565b14610d93576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260056020526040902054426fffffffffffffffffffffffffffffffff9091161115610df0576040517f1dfc20f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600081815260056020526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000169055610e2e906123eb565b60405133907f9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f1990600090a2565b6003610e66336107e0565b6006811115610e7757610e77614460565b1015610eaf576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260046020526040902080544290610f07907f00000000000000000000000000000000000000000000000000000000000000009064010000000090046fffffffffffffffffffffffffffffffff16614725565b6fffffffffffffffffffffffffffffffff161115610f51576040517f7d7a4d1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606460ff83161115610f8f576040517f406b265300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805460ff620100009091048116908316819003610fd8576040517f150393f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160ff168460ff1611610ff657610ff18483614759565b611000565b6110008285614759565b835490915060ff63010000009091048116908216111561104c576040517f9ed4fa4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82547fffffffffffffffffffffffff00000000000000000000000000000000ff00ffff166201000060ff8681169182027fffffffffffffffffffffffff00000000000000000000000000000000ffffffff1692909217640100000000426fffffffffffffffffffffffffffffffff1602178555604080519285168352602083019190915233917fc0b29b9b824f7a62d93fde5832bb8307fd62594d0a08d96d533407a0a147ec48910160405180910390a250505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611165576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061116f610b21565b90506001600160a01b038082161480159061119c5750806001600160a01b0316826001600160a01b031614155b156111d3576040517fc625317600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60066111de836107e0565b60068111156111ef576111ef614460565b14610d3c576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611231336107e0565b600681111561124257611242614460565b14611279576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff1610156112f7576040517f24f21b1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606460ff83161115611335576040517f406b265300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606460ff82161115611373576040517f4143808b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526004602081905260409182902080546fffffffffffffffffffffffffffffffff4216640100000000027fffffffffffffffffffffffff00000000000000000000000000000000ffffffff60ff888116630100000002919091167fffffffffffffffffffffffff0000000000000000000000000000000000ffffff918a1662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff0090941693909317600117169190911717815591517fd7f1a3d800000000000000000000000000000000000000000000000000000000815291927f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169263d7f1a3d8926114b992918991016001600160a01b039290921682526fffffffffffffffffffffffffffffffff16602082015260400190565b6020604051808303816000875af11580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190614678565b506fffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116908516108015906115a7576040517f8abf0af000000000000000000000000000000000000000000000000000000000815233600482018190526115a7916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638abf0af09060240161075f565b60408051821515815260ff86811660208301528516818301526fffffffffffffffffffffffffffffffff87166060820152905133917f04ba0c4d7cbac9138f7b73ec9fef796e4ad320bf5fb204f080f81fd59c2d48b9919081900360800190a25050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611670576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611678612453565b506040517fb0ea09a8000000000000000000000000000000000000000000000000000000008152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0ea09a890602401602060405180830381865afa1580156116fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171e919061477c565b6000549091506001600160a01b039081169082160361174557611740816123eb565b61174d565b61174d612bbc565b610d3c612d4f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e45e8f46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d7919061477c565b6001600160a01b0316336001600160a01b031614611821576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f594a46540000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260006024830181905260016044840152917f00000000000000000000000000000000000000000000000000000000000000009091169063594a4654906064016020604051808303816000875af11580156118b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d99190614678565b600083815260066020526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8316179055905061192e846001610c4f565b6040516fffffffffffffffffffffffffffffffff821681526001600160a01b0380851691908616907fbfeaf055e3cc2126fdbf006eda97657a7a8f82248db4159264060f31dfa2e2d09060200160405180910390a350505050565b6001546000906119a99063ffffffff640100000000820481169116614799565b905090565b60006040518060e00160405280846001600160a01b03168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600115158152602001836effffffffffffffffffffffffffffff168152602001836effffffffffffffffffffffffffffff16815250905083600001600081819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505060008460000160009054906101000a900463ffffffff169050818560010160008363ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160006101000a81548160ff02191690831515021790555060a08201518160010160016101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff16021790555060c08201518160010160106101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff16021790555090505080856002016000866001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055508460000160089054906101000a900463ffffffff1663ffffffff16600003611c8957845463ffffffff90911668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff90911617909355505050565b845468010000000000000000900463ffffffff165b63ffffffff808216600090815260018089016020526040822090810180546effffffffffffffffffffffffffffff70010000000000000000000000000000000080830482168b01909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff90911617905580549092600160c01b909104169003611dc55763ffffffff838116600081815260018a016020526040902080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000938616939093029290921790915581547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b909102178155611dbc8784612fd0565b50505050505050565b8054600160e01b900463ffffffff16600003611e9b5763ffffffff838116600081815260018a8101602052604090912080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000948716949094029390931783559190910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905581547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b909102178155611dbc8784612fd0565b805463ffffffff600160e01b8204811660009081526001808b016020526040808320820154600160c01b909504909316825291902001546effffffffffffffffffffffffffffff70010000000000000000000000000000000092839004811692909104161115611f1b578054600160e01b900463ffffffff169150611f2d565b8054600160c01b900463ffffffff1691505b50611c9e565b6001600160a01b038116600090815260028301602052604081205463ffffffff16808203611f655760009150506120d0565b6001600160a01b03831660009081526002850160209081526040808320805463ffffffff1916905563ffffffff8481168452600180890190935292208054910154740100000000000000000000000000000000000000009091049091169061010090046effffffffffffffffffffffffffffff165b63ffffffff82161561207c5763ffffffff91821660009081526001808801602052604090912090810180546effffffffffffffffffffffffffffff7001000000000000000000000000000000008083048216869003909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9091161790555474010000000000000000000000000000000000000000900490911690611fda565b61208686846131e2565b50508354600163ffffffff64010000000080840482168301909116027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff9092169190911785559150505b92915050565b6001600160a01b038216600090815260028401602052604081205463ffffffff168082036121085760009150506123e4565b63ffffffff80821660009081526001808801602052604090912090810180546effffffffffffffffffffffffffffff8781166101008181027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff85161790945593549290910416927401000000000000000000000000000000000000000090910416908210156122b85763ffffffff83166000908152600188810160205260409091200180547fff000000000000000000000000000000ffffffffffffffffffffffffffffffff8116848803700100000000000000000000000000000000928390046effffffffffffffffffffffffffffff908116820116909202179091555b63ffffffff8216156122a85763ffffffff91821660009081526001808a01602052604090912090810180546effffffffffffffffffffffffffffff70010000000000000000000000000000000080830482168601909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9091161790555474010000000000000000000000000000000000000000900490911690612207565b506122b38784612fd0565b6123dc565b63ffffffff83166000908152600188810160205260409091200180547fff000000000000000000000000000000ffffffffffffffffffffffffffffffff8116878503700100000000000000000000000000000000928390046effffffffffffffffffffffffffffff90811682900316909202179091555b63ffffffff8216156123d15763ffffffff91821660009081526001808a01602052604090912090810180546effffffffffffffffffffffffffffff7001000000000000000000000000000000008083048216869003909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff909116179055547401000000000000000000000000000000000000000090049091169061232f565b506123dc878461396e565b600193505050505b9392505050565b6001600160a01b038116600090815260046020526040902054610100900460ff1615612450576001600160a01b038116600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f98365b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d891906146f5565b6124e39060016147b6565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166369f16eec6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612545573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256991906146f5565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b98debbf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ed919061477c565b6001600160a01b031663ad36d6cc836040518263ffffffff1660e01b815260040161261a91815260200190565b602060405180830381865afa158015612637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265b91906147ce565b6126685760009250505090565b60408051608081018252600080825260208201819052918101829052606081018290525b7f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff161080156126df5750828411155b15612b04576040517f33727c4d000000000000000000000000000000000000000000000000000000008152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906333727c4d90602401602060405180830381865afa158015612762573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278691906147ce565b15612b04576040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a25ae55790602401608060405180830381865afa158015612809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282d91906147eb565b905060008060006128418460000151613d99565b86516040517fad4294510000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526fffffffffffffffffffffffffffffffff808616602483015280851660448301528316606482015293965091945092507f0000000000000000000000000000000000000000000000000000000000000000169063ad42945190608401600060405180830381600087803b1580156128ef57600080fd5b505af1158015612903573d6000803e3d6000fd5b50508551604080516fffffffffffffffffffffffffffffffff8681168252888116602083015287168183015290516001600160a01b0390921693507f36f11936e926f4c5f13247a0f85bfd1361293f182bc6a64bfff082b39aec64d9925081900360600190a26000878152600660205260409020546fffffffffffffffffffffffffffffffff168015612ae25784516040517f594a46540000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526fffffffffffffffffffffffffffffffff83166024820152600060448201527f00000000000000000000000000000000000000000000000000000000000000009091169063594a4654906064016020604051808303816000875af1158015612a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a589190614678565b5060008881526006602090815260409182902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000169055865191516fffffffffffffffffffffffffffffffff841681526001600160a01b03909216917f568d79fa2b3ed5751db3f4588be94b7eb2127a4696e56c68d8983a04ad0f3f50910160405180910390a25b8451612aef906000610c4f565b8760010197508560010195505050505061268c565b6fffffffffffffffffffffffffffffffff821615612bb1576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b4c302ff612b5660018761470e565b6040518263ffffffff1660e01b8152600401612b7491815260200190565b600060405180830381600087803b158015612b8e57600080fd5b505af1158015612ba2573d6000803e3d6000fd5b50505050600194505050505090565b600094505050505090565b6000546001600160a01b031615612d4d57600080546001600160a01b03168152600460205260409020547f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1661010090910460ff1610612cfa576000612c656fffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016426147b6565b600080546001600160a01b03908116825260056020908152604080842080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8716908117909155935490519384529394509216917f95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814910160405180910390a250565b600080546001600160a01b03168152600460205260409020805460ff6101008083048216600101909116027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091161790555b565b6001805468010000000000000000900463ffffffff166000908152600260205260409020015470010000000000000000000000000000000090046effffffffffffffffffffffffffffff168015612fa55760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f98365b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2491906146f5565b6040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018290529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a25ae55790602401608060405180830381865afa158015612ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecc91906147eb565b90506000838260200151434144600143612ee6919061470e565b6040805160208101969096528501939093527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606092831b1691840191909152607483015240609482015260b4016040516020818303038152906040528051906020012060001c612f5791906148bd565b9050612f64600182613e84565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550612450915050565b600080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905550565b63ffffffff80821660009081526001840160205260408082208054740100000000000000000000000000000000000000009004909316825290205b815474010000000000000000000000000000000000000000900463ffffffff161580159061305e5750600180820154908301546effffffffffffffffffffffffffffff6101009283900481169290910416115b156131dc57815481547fffffffffffffffffffffffff00000000000000000000000000000000000000008083166001600160a01b03928316178555835416918116919091178255600180840180548483018054610100908190046effffffffffffffffffffffffffffff9081168083027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff80871691909117875584549584900483169384029516949094179092558354929003700100000000000000000000000000000000808404831691909103909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9091161790558354821660009081526002870160209081526040808320805463ffffffff998a1663ffffffff19918216179091558754965490951683528083208054909516740100000000000000000000000000000000000000009687900489161790945594548490048616808252918701909452818420805493909304909416835290912061300b565b50505050565b63ffffffff8082166000908152600184016020526040812080549092600160c01b9091041690036134c5578054600160e01b900463ffffffff1660000361337457805474010000000000000000000000000000000000000000900463ffffffff166000036132755782547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff168355613330565b600181015460ff16156132dd57805474010000000000000000000000000000000000000000900463ffffffff166000908152600184016020526040902080547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff169055613330565b805474010000000000000000000000000000000000000000900463ffffffff166000908152600184016020526040902080547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690555b5063ffffffff1660009081526001918201602052604081209081550180547fff00000000000000000000000000000000000000000000000000000000000000169055565b805463ffffffff600160e01b80830482166000908152600180880160209081526040808420547fffffffffffffffffffffffff00000000000000000000000000000000000000009097166001600160a01b0397881617808955859004861684528084208084018054948a0180546effffffffffffffffffffffffffffff6101009788900481169097027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff8216811783559254700100000000000000000000000000000000908190049097169096027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9092167fff000000000000000000000000000000000000000000000000000000000000ff9096169590951717909355915490951682526002880190945292909220805494821663ffffffff199095169490941790935581540490911690613968565b8054600160e01b900463ffffffff1660000361362c57805463ffffffff600160c01b80830482166000908152600180880160209081526040808420547fffffffffffffffffffffffff00000000000000000000000000000000000000009097166001600160a01b0397881617808955859004861684528084208084018054948a0180546effffffffffffffffffffffffffffff6101009788900481169097027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff8216811783559254700100000000000000000000000000000000908190049097169096027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9092167fff000000000000000000000000000000000000000000000000000000000000ff9096169590951717909355915490951682526002880190945292909220805494821663ffffffff199095169490941790935581540490911690613968565b805463ffffffff600160e01b82048116600090815260018087016020526040808320820154600160c01b909504909316825291902001546effffffffffffffffffffffffffffff610100928390048116929091041611156137fa57805463ffffffff600160c01b80830482166000908152600180880160209081526040808420547fffffffffffffffffffffffff00000000000000000000000000000000000000009097166001600160a01b03978816178089558581048716855281852080850180548b870180546effffffffffffffffffffffffffffff6101009384900481169093027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff821681178355600160e01b9096048c168a52868a20909801549254700100000000000000000000000000000000908190048316938190048316939093019091169091027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9093167fff000000000000000000000000000000000000000000000000000000000000ff9096169590951791909117909355915490951682526002880190945292909220805494821663ffffffff199095169490941790935581540490911690613968565b805463ffffffff600160e01b80830482166000908152600180880160209081526040808420547fffffffffffffffffffffffff00000000000000000000000000000000000000009097166001600160a01b03978816178089558581048716855281852080850180548b870180546effffffffffffffffffffffffffffff6101009384900481169093027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff8216811783559354600160c01b9096048c168a52868a2090980154700100000000000000000000000000000000908190048316958190048316959095019091169093027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9091167fff000000000000000000000000000000000000000000000000000000000000ff90961695909517949094179055915490951682526002880190945292909220805494821663ffffffff1990951694909417909355815404909116905b506131e2565b5b63ffffffff8082166000908152600180850160205260408083208054600160e01b810486168552828520840154600160c01b90910490951684529220015490916effffffffffffffffffffffffffffff610100918290048116919092049091161115613bb757600180820154825463ffffffff600160c01b90910416600090815285830160205260409020909101546effffffffffffffffffffffffffffff61010092839004811692909104161115610c8557805463ffffffff600160c01b80830482166000908152600187810160208181526040808520547fffffffffffffffffffffffff0000000000000000000000000000000000000000808a166001600160a01b0392831617808c558890048916875282872080549091169982169990991790985583890180548a548890048916875282872086018054610100908190046effffffffffffffffffffffffffffff9081168083027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff80871691909117909655835494839004821692830294909516939093179091558b548990048a168852838820909601805496909203700100000000000000000000000000000000808804831691909103909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9095169490941790935587548716845260028a0180825283852080549a881663ffffffff199b8c161790558854869004871680865292825283852054909716845295909552902080549095169092179093559054041661396f565b600180820154825463ffffffff600160e01b90910416600090815285830160205260409020909101546effffffffffffffffffffffffffffff61010092839004811692909104161115610c8557805463ffffffff600160e01b80830482166000908152600187810160208181526040808520547fffffffffffffffffffffffff0000000000000000000000000000000000000000808a166001600160a01b0392831617808c558890048916875282872080549091169982169990991790985583890180548a548890048916875282872086018054610100908190046effffffffffffffffffffffffffffff9081168083027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff80871691909117909655835494839004821692830294909516939093179091558b548990048a168852838820909601805496909203700100000000000000000000000000000000808804831691909103909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9095169490941790935587548716845260028a0180825283852080549a881663ffffffff199b8c161790558854869004871680865292825283852054909716845295909552902080549095169092179093559054041661396f565b6001600160a01b0381166000908152600460205260408120548190819062010000900460ff1681613dc986614053565b9050600080613e0f6fffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016606486810390614189565b9150613e326fffffffffffffffffffffffffffffffff8416606486810390614189565b9250613e746fffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000850116856064614189565b9198929750909550909350505050565b815460009068010000000000000000900463ffffffff165b63ffffffff80821660009081526001808701602052604080832054600160c01b9004909316825291902001546effffffffffffffffffffffffffffff808516700100000000000000000000000000000000909204161115613f1d5763ffffffff9081166000908152600185016020526040902054600160c01b900416613e9c565b63ffffffff8181166000818152600187810160205260408083208054600160c01b9004909516835282208101549290915291909101547001000000000000000000000000000000009091046effffffffffffffffffffffffffffff90811690940393848116610100909204161115613fb65763ffffffff1660009081526001840160205260409020546001600160a01b031690506120d0565b63ffffffff818116600090815260018681016020526040808320808301549054600160e01b9004909416835290912001546101009091046effffffffffffffffffffffffffffff908116909403938481167001000000000000000000000000000000009092041611156140495763ffffffff9081166000908152600185016020526040902054600160e01b900416613e9c565b60009150506120d0565b6040517f913f1a9f0000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063913f1a9f90602401602060405180830381865afa1580156140d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140fb9190614678565b9050600061413e6fffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660286064614189565b9050614181816fffffffffffffffffffffffffffffffff166501000000000061417a856fffffffffffffffffffffffffffffffff16606461423d565b9190614304565b949350505050565b6000838302608081901c6fffffffffffffffffffffffffffffffff841611614212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f55696e743132384d6174683a206d756c446976206f766572666c6f770000000060448201526064015b60405180910390fd5b826fffffffffffffffffffffffffffffffff1681816142335761423361488e565b0495945050505050565b6000808383108015614256576001811461426957614278565b6501000000000085028490049150614278565b65010000000000840285900491505b506402ef6c3406818002602890811c808402821c808202831c808302841c808402851c938402851c95909502841c641da06a6e33909502841c6455232d2bb2909202841c640d4ca0c283909302841c643177d95571909102841c64fffe4bcada90960290931c94909401919091010391909103039050818311156120d0576501921fb544430392915050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060000361435c578382816143525761435261488e565b04925050506123e4565b8084116143c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f7700000000000000000000006044820152606401614209565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6001600160a01b038116811461245057600080fd5b60006020828403121561445557600080fd5b81356123e48161442e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600783106144ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208083528351808285015260005b818110156144fd578581018301518582016040015282016144e1565b8181111561450f576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b801515811461245057600080fd5b6000806040838503121561456457600080fd5b823561456f8161442e565b9150602083013561457f81614543565b809150509250929050565b803560ff8116811461459b57600080fd5b919050565b6000602082840312156145b257600080fd5b6123e48261458a565b6fffffffffffffffffffffffffffffffff8116811461245057600080fd5b6000806000606084860312156145ee57600080fd5b83356145f9816145bb565b92506146076020850161458a565b91506146156040850161458a565b90509250925092565b60006020828403121561463057600080fd5b5035919050565b60008060006060848603121561464c57600080fd5b83356146578161442e565b925060208401356146678161442e565b929592945050506040919091013590565b60006020828403121561468a57600080fd5b81516123e4816145bb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006fffffffffffffffffffffffffffffffff838116908316818110156146ed576146ed614695565b039392505050565b60006020828403121561470757600080fd5b5051919050565b60008282101561472057614720614695565b500390565b60006fffffffffffffffffffffffffffffffff80831681851680830382111561475057614750614695565b01949350505050565b600060ff821660ff84168082101561477357614773614695565b90039392505050565b60006020828403121561478e57600080fd5b81516123e48161442e565b600063ffffffff838116908316818110156146ed576146ed614695565b600082198211156147c9576147c9614695565b500190565b6000602082840312156147e057600080fd5b81516123e481614543565b6000608082840312156147fd57600080fd5b6040516080810181811067ffffffffffffffff82111715614847577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405282516148558161442e565b815260208381015190820152604083015161486f816145bb565b60408201526060830151614882816145bb565b60608201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006effffffffffffffffffffffffffffff80841680614906577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9216919091069291505056fea164736f6c634300080f000a",
}

// ValidatorManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorManagerMetaData.ABI instead.
var ValidatorManagerABI = ValidatorManagerMetaData.ABI

// ValidatorManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorManagerMetaData.Bin instead.
var ValidatorManagerBin = ValidatorManagerMetaData.Bin

// DeployValidatorManager deploys a new Ethereum contract, binding an instance of ValidatorManager to it.
func DeployValidatorManager(auth *bind.TransactOpts, backend bind.ContractBackend, _constructorParams IValidatorManagerConstructorParams) (common.Address, *types.Transaction, *ValidatorManager, error) {
	parsed, err := ValidatorManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorManagerBin), backend, _constructorParams)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorManager{ValidatorManagerCaller: ValidatorManagerCaller{contract: contract}, ValidatorManagerTransactor: ValidatorManagerTransactor{contract: contract}, ValidatorManagerFilterer: ValidatorManagerFilterer{contract: contract}}, nil
}

// ValidatorManager is an auto generated Go binding around an Ethereum contract.
type ValidatorManager struct {
	ValidatorManagerCaller     // Read-only binding to the contract
	ValidatorManagerTransactor // Write-only binding to the contract
	ValidatorManagerFilterer   // Log filterer for contract events
}

// ValidatorManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorManagerSession struct {
	Contract     *ValidatorManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorManagerCallerSession struct {
	Contract *ValidatorManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ValidatorManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorManagerTransactorSession struct {
	Contract     *ValidatorManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ValidatorManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorManagerRaw struct {
	Contract *ValidatorManager // Generic contract binding to access the raw methods on
}

// ValidatorManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorManagerCallerRaw struct {
	Contract *ValidatorManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorManagerTransactorRaw struct {
	Contract *ValidatorManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorManager creates a new instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManager(address common.Address, backend bind.ContractBackend) (*ValidatorManager, error) {
	contract, err := bindValidatorManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorManager{ValidatorManagerCaller: ValidatorManagerCaller{contract: contract}, ValidatorManagerTransactor: ValidatorManagerTransactor{contract: contract}, ValidatorManagerFilterer: ValidatorManagerFilterer{contract: contract}}, nil
}

// NewValidatorManagerCaller creates a new read-only instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerCaller(address common.Address, caller bind.ContractCaller) (*ValidatorManagerCaller, error) {
	contract, err := bindValidatorManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerCaller{contract: contract}, nil
}

// NewValidatorManagerTransactor creates a new write-only instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorManagerTransactor, error) {
	contract, err := bindValidatorManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerTransactor{contract: contract}, nil
}

// NewValidatorManagerFilterer creates a new log filterer instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorManagerFilterer, error) {
	contract, err := bindValidatorManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerFilterer{contract: contract}, nil
}

// bindValidatorManager binds a generic wrapper to an already deployed contract.
func bindValidatorManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorManager *ValidatorManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorManager.Contract.ValidatorManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorManager *ValidatorManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ValidatorManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorManager *ValidatorManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ValidatorManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorManager *ValidatorManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorManager *ValidatorManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorManager *ValidatorManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorManager.Contract.contract.Transact(opts, method, params...)
}

// ASSETMANAGER is a free data retrieval call binding the contract method 0x6874e042.
//
// Solidity: function ASSET_MANAGER() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) ASSETMANAGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "ASSET_MANAGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ASSETMANAGER is a free data retrieval call binding the contract method 0x6874e042.
//
// Solidity: function ASSET_MANAGER() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) ASSETMANAGER() (common.Address, error) {
	return _ValidatorManager.Contract.ASSETMANAGER(&_ValidatorManager.CallOpts)
}

// ASSETMANAGER is a free data retrieval call binding the contract method 0x6874e042.
//
// Solidity: function ASSET_MANAGER() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) ASSETMANAGER() (common.Address, error) {
	return _ValidatorManager.Contract.ASSETMANAGER(&_ValidatorManager.CallOpts)
}

// BASEREWARD is a free data retrieval call binding the contract method 0x22009af6.
//
// Solidity: function BASE_REWARD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) BASEREWARD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "BASE_REWARD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BASEREWARD is a free data retrieval call binding the contract method 0x22009af6.
//
// Solidity: function BASE_REWARD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) BASEREWARD() (*big.Int, error) {
	return _ValidatorManager.Contract.BASEREWARD(&_ValidatorManager.CallOpts)
}

// BASEREWARD is a free data retrieval call binding the contract method 0x22009af6.
//
// Solidity: function BASE_REWARD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) BASEREWARD() (*big.Int, error) {
	return _ValidatorManager.Contract.BASEREWARD(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDDENOM is a free data retrieval call binding the contract method 0x110d6069.
//
// Solidity: function BOOSTED_REWARD_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) BOOSTEDREWARDDENOM(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "BOOSTED_REWARD_DENOM")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BOOSTEDREWARDDENOM is a free data retrieval call binding the contract method 0x110d6069.
//
// Solidity: function BOOSTED_REWARD_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) BOOSTEDREWARDDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDDENOM(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDDENOM is a free data retrieval call binding the contract method 0x110d6069.
//
// Solidity: function BOOSTED_REWARD_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) BOOSTEDREWARDDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDDENOM(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDNUMERATOR is a free data retrieval call binding the contract method 0x0763fa7e.
//
// Solidity: function BOOSTED_REWARD_NUMERATOR() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) BOOSTEDREWARDNUMERATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "BOOSTED_REWARD_NUMERATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BOOSTEDREWARDNUMERATOR is a free data retrieval call binding the contract method 0x0763fa7e.
//
// Solidity: function BOOSTED_REWARD_NUMERATOR() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) BOOSTEDREWARDNUMERATOR() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDNUMERATOR(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDNUMERATOR is a free data retrieval call binding the contract method 0x0763fa7e.
//
// Solidity: function BOOSTED_REWARD_NUMERATOR() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) BOOSTEDREWARDNUMERATOR() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDNUMERATOR(&_ValidatorManager.CallOpts)
}

// COMMISSIONRATEDENOM is a free data retrieval call binding the contract method 0xb91b2723.
//
// Solidity: function COMMISSION_RATE_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) COMMISSIONRATEDENOM(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "COMMISSION_RATE_DENOM")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONRATEDENOM is a free data retrieval call binding the contract method 0xb91b2723.
//
// Solidity: function COMMISSION_RATE_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) COMMISSIONRATEDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONRATEDENOM(&_ValidatorManager.CallOpts)
}

// COMMISSIONRATEDENOM is a free data retrieval call binding the contract method 0xb91b2723.
//
// Solidity: function COMMISSION_RATE_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) COMMISSIONRATEDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONRATEDENOM(&_ValidatorManager.CallOpts)
}

// COMMISSIONRATEMINCHANGESECONDS is a free data retrieval call binding the contract method 0xdea15254.
//
// Solidity: function COMMISSION_RATE_MIN_CHANGE_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) COMMISSIONRATEMINCHANGESECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "COMMISSION_RATE_MIN_CHANGE_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONRATEMINCHANGESECONDS is a free data retrieval call binding the contract method 0xdea15254.
//
// Solidity: function COMMISSION_RATE_MIN_CHANGE_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) COMMISSIONRATEMINCHANGESECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONRATEMINCHANGESECONDS(&_ValidatorManager.CallOpts)
}

// COMMISSIONRATEMINCHANGESECONDS is a free data retrieval call binding the contract method 0xdea15254.
//
// Solidity: function COMMISSION_RATE_MIN_CHANGE_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) COMMISSIONRATEMINCHANGESECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONRATEMINCHANGESECONDS(&_ValidatorManager.CallOpts)
}

// JAILPERIODSECONDS is a free data retrieval call binding the contract method 0xabeba449.
//
// Solidity: function JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) JAILPERIODSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "JAIL_PERIOD_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// JAILPERIODSECONDS is a free data retrieval call binding the contract method 0xabeba449.
//
// Solidity: function JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) JAILPERIODSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.JAILPERIODSECONDS(&_ValidatorManager.CallOpts)
}

// JAILPERIODSECONDS is a free data retrieval call binding the contract method 0xabeba449.
//
// Solidity: function JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) JAILPERIODSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.JAILPERIODSECONDS(&_ValidatorManager.CallOpts)
}

// JAILTHRESHOLD is a free data retrieval call binding the contract method 0x42223ae9.
//
// Solidity: function JAIL_THRESHOLD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) JAILTHRESHOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "JAIL_THRESHOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// JAILTHRESHOLD is a free data retrieval call binding the contract method 0x42223ae9.
//
// Solidity: function JAIL_THRESHOLD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) JAILTHRESHOLD() (*big.Int, error) {
	return _ValidatorManager.Contract.JAILTHRESHOLD(&_ValidatorManager.CallOpts)
}

// JAILTHRESHOLD is a free data retrieval call binding the contract method 0x42223ae9.
//
// Solidity: function JAIL_THRESHOLD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) JAILTHRESHOLD() (*big.Int, error) {
	return _ValidatorManager.Contract.JAILTHRESHOLD(&_ValidatorManager.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) L2ORACLE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "L2_ORACLE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) L2ORACLE() (common.Address, error) {
	return _ValidatorManager.Contract.L2ORACLE(&_ValidatorManager.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) L2ORACLE() (common.Address, error) {
	return _ValidatorManager.Contract.L2ORACLE(&_ValidatorManager.CallOpts)
}

// MAXOUTPUTFINALIZATIONS is a free data retrieval call binding the contract method 0xe7816b7f.
//
// Solidity: function MAX_OUTPUT_FINALIZATIONS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) MAXOUTPUTFINALIZATIONS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MAX_OUTPUT_FINALIZATIONS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXOUTPUTFINALIZATIONS is a free data retrieval call binding the contract method 0xe7816b7f.
//
// Solidity: function MAX_OUTPUT_FINALIZATIONS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) MAXOUTPUTFINALIZATIONS() (*big.Int, error) {
	return _ValidatorManager.Contract.MAXOUTPUTFINALIZATIONS(&_ValidatorManager.CallOpts)
}

// MAXOUTPUTFINALIZATIONS is a free data retrieval call binding the contract method 0xe7816b7f.
//
// Solidity: function MAX_OUTPUT_FINALIZATIONS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) MAXOUTPUTFINALIZATIONS() (*big.Int, error) {
	return _ValidatorManager.Contract.MAXOUTPUTFINALIZATIONS(&_ValidatorManager.CallOpts)
}

// MINREGISTERAMOUNT is a free data retrieval call binding the contract method 0x1796e52e.
//
// Solidity: function MIN_REGISTER_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) MINREGISTERAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MIN_REGISTER_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINREGISTERAMOUNT is a free data retrieval call binding the contract method 0x1796e52e.
//
// Solidity: function MIN_REGISTER_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) MINREGISTERAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINREGISTERAMOUNT(&_ValidatorManager.CallOpts)
}

// MINREGISTERAMOUNT is a free data retrieval call binding the contract method 0x1796e52e.
//
// Solidity: function MIN_REGISTER_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) MINREGISTERAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINREGISTERAMOUNT(&_ValidatorManager.CallOpts)
}

// MINSTARTAMOUNT is a free data retrieval call binding the contract method 0x3bcebcd8.
//
// Solidity: function MIN_START_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) MINSTARTAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MIN_START_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINSTARTAMOUNT is a free data retrieval call binding the contract method 0x3bcebcd8.
//
// Solidity: function MIN_START_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) MINSTARTAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINSTARTAMOUNT(&_ValidatorManager.CallOpts)
}

// MINSTARTAMOUNT is a free data retrieval call binding the contract method 0x3bcebcd8.
//
// Solidity: function MIN_START_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) MINSTARTAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINSTARTAMOUNT(&_ValidatorManager.CallOpts)
}

// ROUNDDURATIONSECONDS is a free data retrieval call binding the contract method 0x4cca5e6c.
//
// Solidity: function ROUND_DURATION_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) ROUNDDURATIONSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "ROUND_DURATION_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ROUNDDURATIONSECONDS is a free data retrieval call binding the contract method 0x4cca5e6c.
//
// Solidity: function ROUND_DURATION_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) ROUNDDURATIONSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.ROUNDDURATIONSECONDS(&_ValidatorManager.CallOpts)
}

// ROUNDDURATIONSECONDS is a free data retrieval call binding the contract method 0x4cca5e6c.
//
// Solidity: function ROUND_DURATION_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) ROUNDDURATIONSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.ROUNDDURATIONSECONDS(&_ValidatorManager.CallOpts)
}

// TRUSTEDVALIDATOR is a free data retrieval call binding the contract method 0x3ee4d4a3.
//
// Solidity: function TRUSTED_VALIDATOR() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) TRUSTEDVALIDATOR(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "TRUSTED_VALIDATOR")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TRUSTEDVALIDATOR is a free data retrieval call binding the contract method 0x3ee4d4a3.
//
// Solidity: function TRUSTED_VALIDATOR() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) TRUSTEDVALIDATOR() (common.Address, error) {
	return _ValidatorManager.Contract.TRUSTEDVALIDATOR(&_ValidatorManager.CallOpts)
}

// TRUSTEDVALIDATOR is a free data retrieval call binding the contract method 0x3ee4d4a3.
//
// Solidity: function TRUSTED_VALIDATOR() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) TRUSTEDVALIDATOR() (common.Address, error) {
	return _ValidatorManager.Contract.TRUSTEDVALIDATOR(&_ValidatorManager.CallOpts)
}

// CheckSubmissionEligibility is a free data retrieval call binding the contract method 0x891aab74.
//
// Solidity: function checkSubmissionEligibility(address validator) view returns()
func (_ValidatorManager *ValidatorManagerCaller) CheckSubmissionEligibility(opts *bind.CallOpts, validator common.Address) error {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "checkSubmissionEligibility", validator)

	if err != nil {
		return err
	}

	return err

}

// CheckSubmissionEligibility is a free data retrieval call binding the contract method 0x891aab74.
//
// Solidity: function checkSubmissionEligibility(address validator) view returns()
func (_ValidatorManager *ValidatorManagerSession) CheckSubmissionEligibility(validator common.Address) error {
	return _ValidatorManager.Contract.CheckSubmissionEligibility(&_ValidatorManager.CallOpts, validator)
}

// CheckSubmissionEligibility is a free data retrieval call binding the contract method 0x891aab74.
//
// Solidity: function checkSubmissionEligibility(address validator) view returns()
func (_ValidatorManager *ValidatorManagerCallerSession) CheckSubmissionEligibility(validator common.Address) error {
	return _ValidatorManager.Contract.CheckSubmissionEligibility(&_ValidatorManager.CallOpts, validator)
}

// GetCommissionMaxChangeRate is a free data retrieval call binding the contract method 0xb9551f82.
//
// Solidity: function getCommissionMaxChangeRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) GetCommissionMaxChangeRate(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getCommissionMaxChangeRate", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetCommissionMaxChangeRate is a free data retrieval call binding the contract method 0xb9551f82.
//
// Solidity: function getCommissionMaxChangeRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) GetCommissionMaxChangeRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetCommissionMaxChangeRate(&_ValidatorManager.CallOpts, validator)
}

// GetCommissionMaxChangeRate is a free data retrieval call binding the contract method 0xb9551f82.
//
// Solidity: function getCommissionMaxChangeRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) GetCommissionMaxChangeRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetCommissionMaxChangeRate(&_ValidatorManager.CallOpts, validator)
}

// GetCommissionRate is a free data retrieval call binding the contract method 0xe0cc26a2.
//
// Solidity: function getCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) GetCommissionRate(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getCommissionRate", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetCommissionRate is a free data retrieval call binding the contract method 0xe0cc26a2.
//
// Solidity: function getCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) GetCommissionRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetCommissionRate(&_ValidatorManager.CallOpts, validator)
}

// GetCommissionRate is a free data retrieval call binding the contract method 0xe0cc26a2.
//
// Solidity: function getCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) GetCommissionRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetCommissionRate(&_ValidatorManager.CallOpts, validator)
}

// GetStatus is a free data retrieval call binding the contract method 0x30ccebb5.
//
// Solidity: function getStatus(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) GetStatus(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getStatus", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0x30ccebb5.
//
// Solidity: function getStatus(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) GetStatus(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetStatus(&_ValidatorManager.CallOpts, validator)
}

// GetStatus is a free data retrieval call binding the contract method 0x30ccebb5.
//
// Solidity: function getStatus(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) GetStatus(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetStatus(&_ValidatorManager.CallOpts, validator)
}

// GetWeight is a free data retrieval call binding the contract method 0xac6c5251.
//
// Solidity: function getWeight(address validator) view returns(uint120)
func (_ValidatorManager *ValidatorManagerCaller) GetWeight(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getWeight", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetWeight is a free data retrieval call binding the contract method 0xac6c5251.
//
// Solidity: function getWeight(address validator) view returns(uint120)
func (_ValidatorManager *ValidatorManagerSession) GetWeight(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.GetWeight(&_ValidatorManager.CallOpts, validator)
}

// GetWeight is a free data retrieval call binding the contract method 0xac6c5251.
//
// Solidity: function getWeight(address validator) view returns(uint120)
func (_ValidatorManager *ValidatorManagerCallerSession) GetWeight(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.GetWeight(&_ValidatorManager.CallOpts, validator)
}

// JailExpiresAt is a free data retrieval call binding the contract method 0x970531c1.
//
// Solidity: function jailExpiresAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) JailExpiresAt(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "jailExpiresAt", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// JailExpiresAt is a free data retrieval call binding the contract method 0x970531c1.
//
// Solidity: function jailExpiresAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) JailExpiresAt(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.JailExpiresAt(&_ValidatorManager.CallOpts, validator)
}

// JailExpiresAt is a free data retrieval call binding the contract method 0x970531c1.
//
// Solidity: function jailExpiresAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) JailExpiresAt(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.JailExpiresAt(&_ValidatorManager.CallOpts, validator)
}

// NextValidator is a free data retrieval call binding the contract method 0x3a549046.
//
// Solidity: function nextValidator() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) NextValidator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "nextValidator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NextValidator is a free data retrieval call binding the contract method 0x3a549046.
//
// Solidity: function nextValidator() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) NextValidator() (common.Address, error) {
	return _ValidatorManager.Contract.NextValidator(&_ValidatorManager.CallOpts)
}

// NextValidator is a free data retrieval call binding the contract method 0x3a549046.
//
// Solidity: function nextValidator() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) NextValidator() (common.Address, error) {
	return _ValidatorManager.Contract.NextValidator(&_ValidatorManager.CallOpts)
}

// NoSubmissionCount is a free data retrieval call binding the contract method 0xdff221b5.
//
// Solidity: function noSubmissionCount(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) NoSubmissionCount(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "noSubmissionCount", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// NoSubmissionCount is a free data retrieval call binding the contract method 0xdff221b5.
//
// Solidity: function noSubmissionCount(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) NoSubmissionCount(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.NoSubmissionCount(&_ValidatorManager.CallOpts, validator)
}

// NoSubmissionCount is a free data retrieval call binding the contract method 0xdff221b5.
//
// Solidity: function noSubmissionCount(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) NoSubmissionCount(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.NoSubmissionCount(&_ValidatorManager.CallOpts, validator)
}

// StartedValidatorCount is a free data retrieval call binding the contract method 0xeb2ad8cb.
//
// Solidity: function startedValidatorCount() view returns(uint32)
func (_ValidatorManager *ValidatorManagerCaller) StartedValidatorCount(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "startedValidatorCount")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// StartedValidatorCount is a free data retrieval call binding the contract method 0xeb2ad8cb.
//
// Solidity: function startedValidatorCount() view returns(uint32)
func (_ValidatorManager *ValidatorManagerSession) StartedValidatorCount() (uint32, error) {
	return _ValidatorManager.Contract.StartedValidatorCount(&_ValidatorManager.CallOpts)
}

// StartedValidatorCount is a free data retrieval call binding the contract method 0xeb2ad8cb.
//
// Solidity: function startedValidatorCount() view returns(uint32)
func (_ValidatorManager *ValidatorManagerCallerSession) StartedValidatorCount() (uint32, error) {
	return _ValidatorManager.Contract.StartedValidatorCount(&_ValidatorManager.CallOpts)
}

// StartedValidatorTotalWeight is a free data retrieval call binding the contract method 0x1edbc580.
//
// Solidity: function startedValidatorTotalWeight() view returns(uint120)
func (_ValidatorManager *ValidatorManagerCaller) StartedValidatorTotalWeight(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "startedValidatorTotalWeight")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StartedValidatorTotalWeight is a free data retrieval call binding the contract method 0x1edbc580.
//
// Solidity: function startedValidatorTotalWeight() view returns(uint120)
func (_ValidatorManager *ValidatorManagerSession) StartedValidatorTotalWeight() (*big.Int, error) {
	return _ValidatorManager.Contract.StartedValidatorTotalWeight(&_ValidatorManager.CallOpts)
}

// StartedValidatorTotalWeight is a free data retrieval call binding the contract method 0x1edbc580.
//
// Solidity: function startedValidatorTotalWeight() view returns(uint120)
func (_ValidatorManager *ValidatorManagerCallerSession) StartedValidatorTotalWeight() (*big.Int, error) {
	return _ValidatorManager.Contract.StartedValidatorTotalWeight(&_ValidatorManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ValidatorManager *ValidatorManagerCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ValidatorManager *ValidatorManagerSession) Version() (string, error) {
	return _ValidatorManager.Contract.Version(&_ValidatorManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ValidatorManager *ValidatorManagerCallerSession) Version() (string, error) {
	return _ValidatorManager.Contract.Version(&_ValidatorManager.CallOpts)
}

// AfterSubmitL2Output is a paid mutator transaction binding the contract method 0xbe119347.
//
// Solidity: function afterSubmitL2Output(uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerTransactor) AfterSubmitL2Output(opts *bind.TransactOpts, outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "afterSubmitL2Output", outputIndex)
}

// AfterSubmitL2Output is a paid mutator transaction binding the contract method 0xbe119347.
//
// Solidity: function afterSubmitL2Output(uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerSession) AfterSubmitL2Output(outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.Contract.AfterSubmitL2Output(&_ValidatorManager.TransactOpts, outputIndex)
}

// AfterSubmitL2Output is a paid mutator transaction binding the contract method 0xbe119347.
//
// Solidity: function afterSubmitL2Output(uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) AfterSubmitL2Output(outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.Contract.AfterSubmitL2Output(&_ValidatorManager.TransactOpts, outputIndex)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x88576dc9.
//
// Solidity: function changeCommissionRate(uint8 newCommissionRate) returns()
func (_ValidatorManager *ValidatorManagerTransactor) ChangeCommissionRate(opts *bind.TransactOpts, newCommissionRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "changeCommissionRate", newCommissionRate)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x88576dc9.
//
// Solidity: function changeCommissionRate(uint8 newCommissionRate) returns()
func (_ValidatorManager *ValidatorManagerSession) ChangeCommissionRate(newCommissionRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ChangeCommissionRate(&_ValidatorManager.TransactOpts, newCommissionRate)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x88576dc9.
//
// Solidity: function changeCommissionRate(uint8 newCommissionRate) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) ChangeCommissionRate(newCommissionRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ChangeCommissionRate(&_ValidatorManager.TransactOpts, newCommissionRate)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x8ee4b602.
//
// Solidity: function registerValidator(uint128 assets, uint8 commissionRate, uint8 commissionMaxChangeRate) returns()
func (_ValidatorManager *ValidatorManagerTransactor) RegisterValidator(opts *bind.TransactOpts, assets *big.Int, commissionRate uint8, commissionMaxChangeRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "registerValidator", assets, commissionRate, commissionMaxChangeRate)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x8ee4b602.
//
// Solidity: function registerValidator(uint128 assets, uint8 commissionRate, uint8 commissionMaxChangeRate) returns()
func (_ValidatorManager *ValidatorManagerSession) RegisterValidator(assets *big.Int, commissionRate uint8, commissionMaxChangeRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.Contract.RegisterValidator(&_ValidatorManager.TransactOpts, assets, commissionRate, commissionMaxChangeRate)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x8ee4b602.
//
// Solidity: function registerValidator(uint128 assets, uint8 commissionRate, uint8 commissionMaxChangeRate) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) RegisterValidator(assets *big.Int, commissionRate uint8, commissionMaxChangeRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.Contract.RegisterValidator(&_ValidatorManager.TransactOpts, assets, commissionRate, commissionMaxChangeRate)
}

// Slash is a paid mutator transaction binding the contract method 0xe74f8239.
//
// Solidity: function slash(address loser, address winner, uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerTransactor) Slash(opts *bind.TransactOpts, loser common.Address, winner common.Address, outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "slash", loser, winner, outputIndex)
}

// Slash is a paid mutator transaction binding the contract method 0xe74f8239.
//
// Solidity: function slash(address loser, address winner, uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerSession) Slash(loser common.Address, winner common.Address, outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.Contract.Slash(&_ValidatorManager.TransactOpts, loser, winner, outputIndex)
}

// Slash is a paid mutator transaction binding the contract method 0xe74f8239.
//
// Solidity: function slash(address loser, address winner, uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) Slash(loser common.Address, winner common.Address, outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.Contract.Slash(&_ValidatorManager.TransactOpts, loser, winner, outputIndex)
}

// StartValidator is a paid mutator transaction binding the contract method 0x072df4cb.
//
// Solidity: function startValidator() returns()
func (_ValidatorManager *ValidatorManagerTransactor) StartValidator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "startValidator")
}

// StartValidator is a paid mutator transaction binding the contract method 0x072df4cb.
//
// Solidity: function startValidator() returns()
func (_ValidatorManager *ValidatorManagerSession) StartValidator() (*types.Transaction, error) {
	return _ValidatorManager.Contract.StartValidator(&_ValidatorManager.TransactOpts)
}

// StartValidator is a paid mutator transaction binding the contract method 0x072df4cb.
//
// Solidity: function startValidator() returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) StartValidator() (*types.Transaction, error) {
	return _ValidatorManager.Contract.StartValidator(&_ValidatorManager.TransactOpts)
}

// TryUnjail is a paid mutator transaction binding the contract method 0x7d2243b4.
//
// Solidity: function tryUnjail() returns()
func (_ValidatorManager *ValidatorManagerTransactor) TryUnjail(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "tryUnjail")
}

// TryUnjail is a paid mutator transaction binding the contract method 0x7d2243b4.
//
// Solidity: function tryUnjail() returns()
func (_ValidatorManager *ValidatorManagerSession) TryUnjail() (*types.Transaction, error) {
	return _ValidatorManager.Contract.TryUnjail(&_ValidatorManager.TransactOpts)
}

// TryUnjail is a paid mutator transaction binding the contract method 0x7d2243b4.
//
// Solidity: function tryUnjail() returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) TryUnjail() (*types.Transaction, error) {
	return _ValidatorManager.Contract.TryUnjail(&_ValidatorManager.TransactOpts)
}

// UpdateValidatorTree is a paid mutator transaction binding the contract method 0x5bab847f.
//
// Solidity: function updateValidatorTree(address validator, bool tryRemove) returns()
func (_ValidatorManager *ValidatorManagerTransactor) UpdateValidatorTree(opts *bind.TransactOpts, validator common.Address, tryRemove bool) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "updateValidatorTree", validator, tryRemove)
}

// UpdateValidatorTree is a paid mutator transaction binding the contract method 0x5bab847f.
//
// Solidity: function updateValidatorTree(address validator, bool tryRemove) returns()
func (_ValidatorManager *ValidatorManagerSession) UpdateValidatorTree(validator common.Address, tryRemove bool) (*types.Transaction, error) {
	return _ValidatorManager.Contract.UpdateValidatorTree(&_ValidatorManager.TransactOpts, validator, tryRemove)
}

// UpdateValidatorTree is a paid mutator transaction binding the contract method 0x5bab847f.
//
// Solidity: function updateValidatorTree(address validator, bool tryRemove) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) UpdateValidatorTree(validator common.Address, tryRemove bool) (*types.Transaction, error) {
	return _ValidatorManager.Contract.UpdateValidatorTree(&_ValidatorManager.TransactOpts, validator, tryRemove)
}

// ValidatorManagerChallengeRewardDistributedIterator is returned from FilterChallengeRewardDistributed and is used to iterate over the raw logs and unpacked data for ChallengeRewardDistributed events raised by the ValidatorManager contract.
type ValidatorManagerChallengeRewardDistributedIterator struct {
	Event *ValidatorManagerChallengeRewardDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerChallengeRewardDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerChallengeRewardDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerChallengeRewardDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerChallengeRewardDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerChallengeRewardDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerChallengeRewardDistributed represents a ChallengeRewardDistributed event raised by the ValidatorManager contract.
type ValidatorManagerChallengeRewardDistributed struct {
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterChallengeRewardDistributed is a free log retrieval operation binding the contract event 0x568d79fa2b3ed5751db3f4588be94b7eb2127a4696e56c68d8983a04ad0f3f50.
//
// Solidity: event ChallengeRewardDistributed(address indexed recipient, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) FilterChallengeRewardDistributed(opts *bind.FilterOpts, recipient []common.Address) (*ValidatorManagerChallengeRewardDistributedIterator, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ChallengeRewardDistributed", recipientRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerChallengeRewardDistributedIterator{contract: _ValidatorManager.contract, event: "ChallengeRewardDistributed", logs: logs, sub: sub}, nil
}

// WatchChallengeRewardDistributed is a free log subscription operation binding the contract event 0x568d79fa2b3ed5751db3f4588be94b7eb2127a4696e56c68d8983a04ad0f3f50.
//
// Solidity: event ChallengeRewardDistributed(address indexed recipient, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) WatchChallengeRewardDistributed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerChallengeRewardDistributed, recipient []common.Address) (event.Subscription, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ChallengeRewardDistributed", recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerChallengeRewardDistributed)
				if err := _ValidatorManager.contract.UnpackLog(event, "ChallengeRewardDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeRewardDistributed is a log parse operation binding the contract event 0x568d79fa2b3ed5751db3f4588be94b7eb2127a4696e56c68d8983a04ad0f3f50.
//
// Solidity: event ChallengeRewardDistributed(address indexed recipient, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) ParseChallengeRewardDistributed(log types.Log) (*ValidatorManagerChallengeRewardDistributed, error) {
	event := new(ValidatorManagerChallengeRewardDistributed)
	if err := _ValidatorManager.contract.UnpackLog(event, "ChallengeRewardDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerRewardDistributedIterator is returned from FilterRewardDistributed and is used to iterate over the raw logs and unpacked data for RewardDistributed events raised by the ValidatorManager contract.
type ValidatorManagerRewardDistributedIterator struct {
	Event *ValidatorManagerRewardDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerRewardDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerRewardDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerRewardDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerRewardDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerRewardDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerRewardDistributed represents a RewardDistributed event raised by the ValidatorManager contract.
type ValidatorManagerRewardDistributed struct {
	Validator       common.Address
	ValidatorReward *big.Int
	BaseReward      *big.Int
	BoostedReward   *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRewardDistributed is a free log retrieval operation binding the contract event 0x36f11936e926f4c5f13247a0f85bfd1361293f182bc6a64bfff082b39aec64d9.
//
// Solidity: event RewardDistributed(address indexed validator, uint128 validatorReward, uint128 baseReward, uint128 boostedReward)
func (_ValidatorManager *ValidatorManagerFilterer) FilterRewardDistributed(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerRewardDistributedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "RewardDistributed", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerRewardDistributedIterator{contract: _ValidatorManager.contract, event: "RewardDistributed", logs: logs, sub: sub}, nil
}

// WatchRewardDistributed is a free log subscription operation binding the contract event 0x36f11936e926f4c5f13247a0f85bfd1361293f182bc6a64bfff082b39aec64d9.
//
// Solidity: event RewardDistributed(address indexed validator, uint128 validatorReward, uint128 baseReward, uint128 boostedReward)
func (_ValidatorManager *ValidatorManagerFilterer) WatchRewardDistributed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerRewardDistributed, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "RewardDistributed", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerRewardDistributed)
				if err := _ValidatorManager.contract.UnpackLog(event, "RewardDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardDistributed is a log parse operation binding the contract event 0x36f11936e926f4c5f13247a0f85bfd1361293f182bc6a64bfff082b39aec64d9.
//
// Solidity: event RewardDistributed(address indexed validator, uint128 validatorReward, uint128 baseReward, uint128 boostedReward)
func (_ValidatorManager *ValidatorManagerFilterer) ParseRewardDistributed(log types.Log) (*ValidatorManagerRewardDistributed, error) {
	event := new(ValidatorManagerRewardDistributed)
	if err := _ValidatorManager.contract.UnpackLog(event, "RewardDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerSlashedIterator is returned from FilterSlashed and is used to iterate over the raw logs and unpacked data for Slashed events raised by the ValidatorManager contract.
type ValidatorManagerSlashedIterator struct {
	Event *ValidatorManagerSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerSlashed represents a Slashed event raised by the ValidatorManager contract.
type ValidatorManagerSlashed struct {
	Loser  common.Address
	Winner common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSlashed is a free log retrieval operation binding the contract event 0xbfeaf055e3cc2126fdbf006eda97657a7a8f82248db4159264060f31dfa2e2d0.
//
// Solidity: event Slashed(address indexed loser, address indexed winner, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) FilterSlashed(opts *bind.FilterOpts, loser []common.Address, winner []common.Address) (*ValidatorManagerSlashedIterator, error) {

	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}
	var winnerRule []interface{}
	for _, winnerItem := range winner {
		winnerRule = append(winnerRule, winnerItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "Slashed", loserRule, winnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerSlashedIterator{contract: _ValidatorManager.contract, event: "Slashed", logs: logs, sub: sub}, nil
}

// WatchSlashed is a free log subscription operation binding the contract event 0xbfeaf055e3cc2126fdbf006eda97657a7a8f82248db4159264060f31dfa2e2d0.
//
// Solidity: event Slashed(address indexed loser, address indexed winner, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) WatchSlashed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerSlashed, loser []common.Address, winner []common.Address) (event.Subscription, error) {

	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}
	var winnerRule []interface{}
	for _, winnerItem := range winner {
		winnerRule = append(winnerRule, winnerItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "Slashed", loserRule, winnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerSlashed)
				if err := _ValidatorManager.contract.UnpackLog(event, "Slashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashed is a log parse operation binding the contract event 0xbfeaf055e3cc2126fdbf006eda97657a7a8f82248db4159264060f31dfa2e2d0.
//
// Solidity: event Slashed(address indexed loser, address indexed winner, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) ParseSlashed(log types.Log) (*ValidatorManagerSlashed, error) {
	event := new(ValidatorManagerSlashed)
	if err := _ValidatorManager.contract.UnpackLog(event, "Slashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorCommissionRateChangedIterator is returned from FilterValidatorCommissionRateChanged and is used to iterate over the raw logs and unpacked data for ValidatorCommissionRateChanged events raised by the ValidatorManager contract.
type ValidatorManagerValidatorCommissionRateChangedIterator struct {
	Event *ValidatorManagerValidatorCommissionRateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorCommissionRateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorCommissionRateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorCommissionRateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorCommissionRateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorCommissionRateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorCommissionRateChanged represents a ValidatorCommissionRateChanged event raised by the ValidatorManager contract.
type ValidatorManagerValidatorCommissionRateChanged struct {
	Validator         common.Address
	OldCommissionRate uint8
	NewCommissionRate uint8
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterValidatorCommissionRateChanged is a free log retrieval operation binding the contract event 0xc0b29b9b824f7a62d93fde5832bb8307fd62594d0a08d96d533407a0a147ec48.
//
// Solidity: event ValidatorCommissionRateChanged(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorCommissionRateChanged(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorCommissionRateChangedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorCommissionRateChanged", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorCommissionRateChangedIterator{contract: _ValidatorManager.contract, event: "ValidatorCommissionRateChanged", logs: logs, sub: sub}, nil
}

// WatchValidatorCommissionRateChanged is a free log subscription operation binding the contract event 0xc0b29b9b824f7a62d93fde5832bb8307fd62594d0a08d96d533407a0a147ec48.
//
// Solidity: event ValidatorCommissionRateChanged(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorCommissionRateChanged(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorCommissionRateChanged, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorCommissionRateChanged", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorCommissionRateChanged)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorCommissionRateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCommissionRateChanged is a log parse operation binding the contract event 0xc0b29b9b824f7a62d93fde5832bb8307fd62594d0a08d96d533407a0a147ec48.
//
// Solidity: event ValidatorCommissionRateChanged(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorCommissionRateChanged(log types.Log) (*ValidatorManagerValidatorCommissionRateChanged, error) {
	event := new(ValidatorManagerValidatorCommissionRateChanged)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorCommissionRateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorJailedIterator is returned from FilterValidatorJailed and is used to iterate over the raw logs and unpacked data for ValidatorJailed events raised by the ValidatorManager contract.
type ValidatorManagerValidatorJailedIterator struct {
	Event *ValidatorManagerValidatorJailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorJailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorJailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorJailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorJailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorJailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorJailed represents a ValidatorJailed event raised by the ValidatorManager contract.
type ValidatorManagerValidatorJailed struct {
	Validator common.Address
	ExpiresAt *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJailed is a free log retrieval operation binding the contract event 0x95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814.
//
// Solidity: event ValidatorJailed(address indexed validator, uint128 expiresAt)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorJailed(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorJailedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorJailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorJailedIterator{contract: _ValidatorManager.contract, event: "ValidatorJailed", logs: logs, sub: sub}, nil
}

// WatchValidatorJailed is a free log subscription operation binding the contract event 0x95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814.
//
// Solidity: event ValidatorJailed(address indexed validator, uint128 expiresAt)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorJailed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorJailed, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorJailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorJailed)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorJailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJailed is a log parse operation binding the contract event 0x95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814.
//
// Solidity: event ValidatorJailed(address indexed validator, uint128 expiresAt)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorJailed(log types.Log) (*ValidatorManagerValidatorJailed, error) {
	event := new(ValidatorManagerValidatorJailed)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorJailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorRegisteredIterator is returned from FilterValidatorRegistered and is used to iterate over the raw logs and unpacked data for ValidatorRegistered events raised by the ValidatorManager contract.
type ValidatorManagerValidatorRegisteredIterator struct {
	Event *ValidatorManagerValidatorRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorRegistered represents a ValidatorRegistered event raised by the ValidatorManager contract.
type ValidatorManagerValidatorRegistered struct {
	Validator               common.Address
	Started                 bool
	CommissionRate          uint8
	CommissionMaxChangeRate uint8
	Assets                  *big.Int
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterValidatorRegistered is a free log retrieval operation binding the contract event 0x04ba0c4d7cbac9138f7b73ec9fef796e4ad320bf5fb204f080f81fd59c2d48b9.
//
// Solidity: event ValidatorRegistered(address indexed validator, bool started, uint8 commissionRate, uint8 commissionMaxChangeRate, uint128 assets)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorRegistered(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorRegisteredIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorRegistered", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorRegisteredIterator{contract: _ValidatorManager.contract, event: "ValidatorRegistered", logs: logs, sub: sub}, nil
}

// WatchValidatorRegistered is a free log subscription operation binding the contract event 0x04ba0c4d7cbac9138f7b73ec9fef796e4ad320bf5fb204f080f81fd59c2d48b9.
//
// Solidity: event ValidatorRegistered(address indexed validator, bool started, uint8 commissionRate, uint8 commissionMaxChangeRate, uint128 assets)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorRegistered(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorRegistered, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorRegistered", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorRegistered)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorRegistered is a log parse operation binding the contract event 0x04ba0c4d7cbac9138f7b73ec9fef796e4ad320bf5fb204f080f81fd59c2d48b9.
//
// Solidity: event ValidatorRegistered(address indexed validator, bool started, uint8 commissionRate, uint8 commissionMaxChangeRate, uint128 assets)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorRegistered(log types.Log) (*ValidatorManagerValidatorRegistered, error) {
	event := new(ValidatorManagerValidatorRegistered)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorStartedIterator is returned from FilterValidatorStarted and is used to iterate over the raw logs and unpacked data for ValidatorStarted events raised by the ValidatorManager contract.
type ValidatorManagerValidatorStartedIterator struct {
	Event *ValidatorManagerValidatorStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorStarted represents a ValidatorStarted event raised by the ValidatorManager contract.
type ValidatorManagerValidatorStarted struct {
	Validator common.Address
	StartsAt  *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorStarted is a free log retrieval operation binding the contract event 0xe8e4e936783175825bcf08ad234ab704ad447aeda363141c88312a07a729d067.
//
// Solidity: event ValidatorStarted(address indexed validator, uint256 startsAt)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorStarted(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorStartedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorStarted", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorStartedIterator{contract: _ValidatorManager.contract, event: "ValidatorStarted", logs: logs, sub: sub}, nil
}

// WatchValidatorStarted is a free log subscription operation binding the contract event 0xe8e4e936783175825bcf08ad234ab704ad447aeda363141c88312a07a729d067.
//
// Solidity: event ValidatorStarted(address indexed validator, uint256 startsAt)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorStarted(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorStarted, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorStarted", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorStarted)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorStarted is a log parse operation binding the contract event 0xe8e4e936783175825bcf08ad234ab704ad447aeda363141c88312a07a729d067.
//
// Solidity: event ValidatorStarted(address indexed validator, uint256 startsAt)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorStarted(log types.Log) (*ValidatorManagerValidatorStarted, error) {
	event := new(ValidatorManagerValidatorStarted)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorUnjailedIterator is returned from FilterValidatorUnjailed and is used to iterate over the raw logs and unpacked data for ValidatorUnjailed events raised by the ValidatorManager contract.
type ValidatorManagerValidatorUnjailedIterator struct {
	Event *ValidatorManagerValidatorUnjailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorUnjailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorUnjailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorUnjailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorUnjailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorUnjailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorUnjailed represents a ValidatorUnjailed event raised by the ValidatorManager contract.
type ValidatorManagerValidatorUnjailed struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorUnjailed is a free log retrieval operation binding the contract event 0x9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f19.
//
// Solidity: event ValidatorUnjailed(address indexed validator)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorUnjailed(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorUnjailedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorUnjailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorUnjailedIterator{contract: _ValidatorManager.contract, event: "ValidatorUnjailed", logs: logs, sub: sub}, nil
}

// WatchValidatorUnjailed is a free log subscription operation binding the contract event 0x9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f19.
//
// Solidity: event ValidatorUnjailed(address indexed validator)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorUnjailed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorUnjailed, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorUnjailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorUnjailed)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorUnjailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorUnjailed is a log parse operation binding the contract event 0x9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f19.
//
// Solidity: event ValidatorUnjailed(address indexed validator)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorUnjailed(log types.Log) (*ValidatorManagerValidatorUnjailed, error) {
	event := new(ValidatorManagerValidatorUnjailed)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorUnjailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
